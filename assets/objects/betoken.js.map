{
  "version": 3,
  "file": "betoken.js",
  "sourceRoot": "",
  "sources": [
    "betoken.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import BigNumber from \"bignumber.js\"\r\n\r\n#Import web3\r\nWeb3 = require 'web3'\r\nweb3 = window.web3\r\nif typeof web3 != \"undefined\"\r\n  web3 = new Web3(web3.currentProvider)\r\nelse\r\n  web3 = new Web3(new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/m7Pdc77PjIwgmp7t0iKI\"))\r\n\r\nETH_TOKEN_ADDRESS = \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\"\r\n\r\n###*\r\n * Sets the first account as defaultAccount\r\n * @return {Promise} .then(()->)\r\n###\r\ngetDefaultAccount = () ->\r\n  web3.eth.defaultAccount = (await web3.eth.getAccounts())[0]\r\n\r\nERC20 = (_tokenAddr) ->\r\n  erc20ABI = require(\"./abi/ERC20.json\").abi\r\n  return new web3.eth.Contract(erc20ABI, _tokenAddr)\r\n\r\n###*\r\n * Constructs an abstraction of Betoken contracts\r\n * @param {String} _address the GroupFund contract's address\r\n###\r\nexport Betoken = (_address) ->\r\n  self = this\r\n  self.contracts =\r\n    betokenFund: null\r\n    controlToken: null\r\n    shareToken: null\r\n  self.addrs =\r\n    betokenFund: null\r\n    controlToken: null\r\n    shareToken: null\r\n\r\n  ###\r\n    Getters\r\n  ###\r\n\r\n  ###*\r\n   * Gets a primitive variable in GroupFund\r\n   * @param  {String} _varName the name of the primitive variable\r\n   * @return {Promise}          .then((_value)->)\r\n  ###\r\n  self.getPrimitiveVar = (_varName) -> self.contracts.betokenFund.methods[_varName]().call()\r\n\r\n  ###*\r\n   * Calls a mapping or an array in GroupFund\r\n   * @param  {String} _name name of the mapping/array\r\n   * @param  {Any} _input       the input\r\n   * @return {Promise}              .then((_value)->)\r\n  ###\r\n  self.getMappingOrArrayItem = (_name, _input) -> self.contracts.betokenFund.methods[_name](_input).call()\r\n\r\n  ###*\r\n   * Calls a double mapping in GroupFund\r\n   * @param  {String} _mappingName name of the mapping\r\n   * @param  {Any} _input1      the first input\r\n   * @param  {Any} _input2      the second input\r\n   * @return {Promise}              .then((_value)->)\r\n  ###\r\n  self.getDoubleMapping = (_mappingName, _input1, _input2) ->\r\n    self.contracts.betokenFund.methods[_mappingName](_input1, _input2).call()\r\n\r\n  self.getTokenSymbol = (_tokenAddr) ->\r\n    _tokenAddr = web3.utils.toHex(_tokenAddr)\r\n    if _tokenAddr == ETH_TOKEN_ADDRESS\r\n      return Promise.resolve().then(() -> \"ETH\")\r\n    return ERC20(_tokenAddr).methods.symbol().call()\r\n\r\n  self.getTokenDecimals = (_tokenAddr) ->\r\n    _tokenAddr = web3.utils.toHex(_tokenAddr)\r\n    if _tokenAddr == ETH_TOKEN_ADDRESS\r\n      return Promise.resolve().then(() -> 18)\r\n    return ERC20(_tokenAddr).methods.decimals().call()\r\n\r\n\r\n  ###*\r\n   * Gets the Kairo balance of an address\r\n   * @param  {String} _address the address whose balance we're getting\r\n   * @return {Promise}          .then((_value)->)\r\n  ###\r\n  self.getKairoBalance = (_address) -> self.contracts.controlToken.methods.balanceOf(_address).call()\r\n\r\n  self.getKairoTotalSupply = () -> self.contracts.controlToken.methods.totalSupply().call()\r\n\r\n  ###*\r\n   * Gets the Share balance of an address\r\n   * @param  {String} _address the address whose balance we're getting\r\n   * @return {Promise}          .then((_value)->)\r\n  ###\r\n  self.getShareBalance = (_address) -> self.contracts.shareToken.methods.balanceOf(_address).call()\r\n\r\n  self.getShareTotalSupply = () -> self.contracts.shareToken.methods.totalSupply().call()\r\n\r\n  ###\r\n    Phase handlers\r\n  ###\r\n\r\n  ###*\r\n   * Ends the current phase\r\n   * @param  {Function} _callback will be called after tx hash is generated\r\n   * @return {Promise} .then(()->)\r\n  ###\r\n  self.nextPhase = (_callback) ->\r\n    await getDefaultAccount()\r\n    return self.contracts.betokenFund.methods.nextPhase().send({from: web3.eth.defaultAccount}).on(\r\n      \"transactionHash\", _callback\r\n    )\r\n\r\n  ###\r\n    ChangeMakingTime functions\r\n  ###\r\n\r\n  ###*\r\n   * Allows user to deposit into the GroupFund\r\n   * @param  {BigNumber} _amountInWeis the deposit amount\r\n   * @param  {Function} _callback will be called after tx hash is generated\r\n   * @return {Promise}               .then(()->)\r\n  ###\r\n  self.deposit = (_amountInWeis, _callback) ->\r\n    funcSignature = web3.eth.abi.encodeFunctionSignature(\"deposit()\")\r\n    await getDefaultAccount()\r\n    return web3.eth.sendTransaction({from: web3.eth.defaultAccount, to: self.addrs.betokenFund, value: _amountInWeis, data: funcSignature}).on(\"transactionHash\", _callback)\r\n\r\n  self.depositToken = (_tokenAddr, _tokenAmount, _callback) ->\r\n    await getDefaultAccount()\r\n    token = ERC20(_tokenAddr)\r\n    amount = BigNumber(_tokenAmount).mul(BigNumber(10).toPower(await self.getTokenDecimals(_tokenAddr)))\r\n    await token.methods.approve(self.addrs.betokenFund, amount).send({from: web3.eth.defaultAccount}).on(\"transactionHash\", _callback)\r\n    await self.contracts.betokenFund.methods.depositToken(_tokenAddr, amount).send({from: web3.eth.defaultAccount}).on(\"transactionHash\", _callback)\r\n    await token.methods.approve(self.addrs.betokenFund, 0).send({from: web3.eth.defaultAccount}).on(\"transactionHash\", _callback)\r\n\r\n  ###*\r\n   * Allows user to withdraw from GroupFund balance\r\n   * @param  {BigNumber} _amountInWeis the withdrawl amount\r\n   * @param  {Function} _callback will be called after tx hash is generated\r\n   * @return {Promise}               .then(()->)\r\n  ###\r\n  self.withdraw = (_amountInWeis, _callback) ->\r\n    await getDefaultAccount()\r\n    return self.contracts.betokenFund.methods.withdraw(_amountInWeis).send({from: web3.eth.defaultAccount}).on(\"transactionHash\", _callback)\r\n\r\n  self.withdrawToken = (_tokenAddr, _amountInDAI, _callback) ->\r\n    await getDefaultAccount()\r\n    amount = BigNumber(_amountInDAI).mul(1e18)\r\n    return self.contracts.betokenFund.methods.withdrawToken(_tokenAddr, amount).send({from: web3.eth.defaultAccount}).on(\"transactionHash\", _callback)\r\n\r\n  ###*\r\n   * Withdraws all of user's balance in cases of emergency\r\n   * @param  {Function} _callback will be called after tx hash is generated\r\n   * @return {Promise}           .then(()->)\r\n  ###\r\n  self.emergencyWithdraw = (_callback) ->\r\n    await getDefaultAccount()\r\n    return self.contracts.betokenFund.methods.emergencyWithdraw().send({from: web3.eth.defaultAccount}).on(\"transactionhash\", _callback)\r\n\r\n  ###*\r\n   * Sends Kairo to another address\r\n   * @param  {String} _to           the recipient address\r\n   * @param  {BigNumber} _amountInWeis the amount\r\n   * @param  {Function} _callback     will be called after tx hash is generated\r\n   * @return {Promise}               .then(()->)\r\n  ###\r\n  self.sendKairo = (_to, _amountInWeis, _callback) ->\r\n    await getDefaultAccount()\r\n    return self.contracts.controlToken.methods.transfer(_to, _amountInWeis).send({from: web3.eth.defaultAccount}).on(\"transactionHash\", _callback)\r\n\r\n  ###*\r\n     * Sends Shares to another address\r\n     * @param  {String} _to           the recipient address\r\n     * @param  {BigNumber} _amountInWeis the amount\r\n     * @param  {Function} _callback     will be called after tx hash is generated\r\n     * @return {Promise}               .then(()->)\r\n    ###\r\n  self.sendShares = (_to, _amountInWeis, _callback) ->\r\n    await getDefaultAccount()\r\n    return self.contracts.shareToken.methods.transfer(_to, _amountInWeis).send({from: web3.eth.defaultAccount}).on(\"transactionHash\", _callback)\r\n\r\n  ###\r\n    ProposalMakingTime functions\r\n  ###\r\n\r\n  ###*\r\n   * Gets the array of investments\r\n   * @return {Promise} .then((investments) ->)\r\n  ###\r\n  self.getInvestments = (_userAddress) ->\r\n    array = []\r\n    return self.contracts.betokenFund.methods.investmentsCount(_userAddress).call().then(\r\n      (_count) ->\r\n        count = +_count\r\n        if count == 0\r\n          return []\r\n        array = new Array(count)\r\n        getItem = (id) ->\r\n          return self.contracts.betokenFund.methods.userInvestments(_userAddress, id).call().then(\r\n            (_item) ->\r\n              return new Promise((fullfill, reject) ->\r\n                if typeof _item != null\r\n                  array[id] = _item\r\n                  fullfill()\r\n                else\r\n                  reject()\r\n                return\r\n              )\r\n          )\r\n        getAllItems = (getItem(id) for id in [0..count - 1])\r\n        return Promise.all(getAllItems)\r\n    ).then(\r\n      () ->\r\n        return array\r\n    )\r\n\r\n  ###*\r\n   * Creates proposal\r\n   * @param  {String} _tokenAddress the token address\r\n   * @param  {BigNumber} _stakeInWeis the investment amount\r\n   * @param  {Function} _callback will be called after tx hash is generated\r\n   * @return {Promise}               .then(()->)\r\n  ###\r\n  self.createInvestment = (_tokenAddress, _stakeInWeis, _callback) ->\r\n    await getDefaultAccount()\r\n    return self.contracts.betokenFund.methods.createInvestment(_tokenAddress, _stakeInWeis).send({from: web3.eth.defaultAccount}).on(\"transactionHash\", _callback)\r\n\r\n  self.sellAsset = (_proposalId, _callback) ->\r\n    await getDefaultAccount()\r\n    return self.contracts.betokenFund.methods.sellInvestmentAsset(_proposalId).send({from: web3.eth.defaultAccount}).on(\"transactionHash\", _callback)\r\n\r\n  ###\r\n    Finalized Phase functions\r\n  ###\r\n  self.redeemCommission = (_callback) ->\r\n    await getDefaultAccount()\r\n    return self.contracts.betokenFund.methods.redeemCommission().send({from: web3.eth.defaultAccount}).on(\"transactionHash\", _callback)\r\n\r\n  self.redeemCommissionInShares = (_callback) ->\r\n    await getDefaultAccount()\r\n    return self.contracts.betokenFund.methods.redeemCommissionInShares().send({from: web3.eth.defaultAccount}).on(\"transactionHash\", _callback)\r\n\r\n  ###\r\n    Object Initialization\r\n  ###\r\n\r\n  self.init = () ->\r\n    #Initialize GroupFund contract\r\n    self.addrs.betokenFund = _address\r\n    betokenFundABI = require(\"./abi/BetokenFund.json\").abi\r\n    self.contracts.betokenFund = new web3.eth.Contract(betokenFundABI, self.addrs.betokenFund)\r\n\r\n    #Get ControlToken address\r\n    return self.contracts.betokenFund.methods.controlTokenAddr().call().then(\r\n      (_controlTokenAddr) ->\r\n        #Initialize ControlToken contract\r\n        self.addrs.controlToken = _controlTokenAddr\r\n        controlTokenABI = require(\"./abi/ControlToken.json\").abi\r\n        self.contracts.controlToken = new web3.eth.Contract(controlTokenABI, self.addrs.controlToken)\r\n\r\n        #Get ShareToken address\r\n        return self.contracts.betokenFund.methods.shareTokenAddr().call()\r\n    ).then(\r\n      (_shareTokenAddr) ->\r\n        #Initialize ShareToken contract\r\n        self.addrs.shareToken = _shareTokenAddr\r\n        shareTokenABI = require(\"./abi/ShareToken.json\").abi\r\n        self.contracts.shareToken = new web3.eth.Contract(shareTokenABI, self.addrs.shareToken)\r\n    )\r\n\r\n  return self\r\n"
  ]
}